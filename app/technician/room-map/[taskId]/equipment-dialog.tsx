"use client"

import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { CheckCircle, Monitor, Snowflake, Wifi, Wrench, Zap } from "lucide-react"

interface Equipment {
  id: string
  name: string
  code: string
  type: "computer" | "ac" | "projector" | "electrical" |"router"
  status: "working" | "repair" | "maintenance"
  position: { x: number; y: number }
  tableNumber: number
  side: "left" | "right"
  row: number
  seat: number
  room: string
  needsRepair?: boolean
  repairDescription?: string
}

interface EquipmentDialogProps {
  equipment: Equipment | null
  isOpen: boolean
  onClose: () => void
  onStatusUpdate: (equipmentId: string, newStatus: "working" | "repair" | "maintenance") => void
  isTargetEquipment?: boolean
}

export function EquipmentDialog({
  equipment,
  isOpen,
  onClose,
  onStatusUpdate,
  isTargetEquipment = false,
}: EquipmentDialogProps) {
  if (!equipment) return null

  const getEquipmentIcon = (type: string) => {
    switch (type) {
      case "computer":
        return <Monitor className="w-5 h-5" />
      case "ac":
        return <Snowflake className="w-5 h-5" />
      case "projector":
        return <Zap className="w-5 h-5" />
      case "router":
        return <Wifi className="w-5 h-5" />
      case "electrical":
        return <Zap className="w-5 h-5" />
      default:
        return <Wrench className="w-5 h-5" />
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "working":
        return <Badge className="bg-green-100 text-green-800">‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ</Badge>
      case "repair":
        return <Badge className="bg-red-100 text-red-800">‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡πà‡∏≠‡∏°</Badge>
      case "maintenance":
        return <Badge className="bg-yellow-100 text-yellow-800">‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤</Badge>
      default:
        return <Badge variant="secondary">‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</Badge>
    }
  }

  const getEquipmentTypeName = (type: string) => {
    switch (type) {
      case "computer":
        return "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå"
      case "ac":
        return "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®"
      case "projector":
        return "‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå"
      case "router":
        return "Router"
      case "electrical":
        return "‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤"
      default:
        return "‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå"
    }
  }

  const getTablePosition = (equipment: Equipment) => {
    if (equipment.tableNumber === 0) return "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©"
    return `‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà ${equipment.tableNumber} (‡∏ù‡∏±‡πà‡∏á${equipment.side === "left" ? "‡∏ã‡πâ‡∏≤‡∏¢" : "‡∏Ç‡∏ß‡∏≤"} ‡πÅ‡∏ñ‡∏ß ${equipment.row} ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á ${equipment.seat})`
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            {getEquipmentIcon(equipment.type)}
            ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
            {isTargetEquipment && (
              <Badge variant="destructive" className="ml-2">
                üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
              </Badge>
            )}
          </DialogTitle>
          <DialogDescription>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {/* Equipment Info */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium text-gray-600">‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</label>
              <p className="text-sm font-semibold">{equipment.name}</p>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-600">‡∏£‡∏´‡∏±‡∏™</label>
              <p className="text-sm font-semibold">{equipment.code}</p>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-600">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</label>
              <p className="text-sm">{getEquipmentTypeName(equipment.type)}</p>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-600">‡∏´‡πâ‡∏≠‡∏á</label>
              <p className="text-sm">{equipment.room}</p>
            </div>
          </div>

          {/* Table Position */}
          <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
            <label className="text-sm font-medium text-blue-800">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÇ‡∏ï‡πä‡∏∞</label>
            <p className="text-sm font-semibold text-blue-700">{getTablePosition(equipment)}</p>
            {equipment.tableNumber > 0 && (
              <div className="mt-2 text-xs text-blue-600">
                <div>‚Ä¢ ‡∏ù‡∏±‡πà‡∏á: {equipment.side === "left" ? "‡∏ã‡πâ‡∏≤‡∏¢" : "‡∏Ç‡∏ß‡∏≤"}</div>
                <div>‚Ä¢ ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà: {equipment.row}</div>
                <div>‚Ä¢ ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà: {equipment.seat}</div>
              </div>
            )}
          </div>

          {/* Status */}
          <div>
            <label className="text-sm font-medium text-gray-600 mb-2 block">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</label>
            <div className="flex items-center gap-2">{getStatusBadge(equipment.status)}</div>
          </div>

          {/* Repair Description */}
          {equipment.repairDescription && (
            <div className="p-3 bg-red-50 rounded-lg border border-red-200">
              <label className="text-sm font-medium text-red-800">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤</label>
              <p className="text-sm text-red-700 mt-1">{equipment.repairDescription}</p>
            </div>
          )}

          {/* Status Update */}
          {isTargetEquipment && (
            <div className="pt-4 border-t">
              <label className="text-sm font-medium mb-2 block">‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</label>
              <div className="flex gap-2 flex-wrap">
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => onStatusUpdate(equipment.id, "repair")}
                  className="text-blue-600 border-blue-600 hover:bg-blue-50"
                >
                  ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ã‡πà‡∏≠‡∏°
                </Button>
                <Button
                  size="sm"
                  onClick={() => onStatusUpdate(equipment.id, "working")}
                  className="bg-green-600 hover:bg-green-700"
                >
                  <CheckCircle className="w-4 h-4 mr-1" />
                  ‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à
                </Button>
              </div>
            </div>
          )}

          {/* Actions */}
          <div className="flex justify-end gap-2 pt-4">
            <Button variant="outline" onClick={onClose}>
              ‡∏õ‡∏¥‡∏î
            </Button>
            {isTargetEquipment && <Button className="bg-orange-600 hover:bg-orange-700">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°</Button>}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}
